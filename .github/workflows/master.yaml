name: Production Deployment CI/CD

on:
  push:
    branches: [master]

jobs:
  chromatic-deployment:
    # Operating System
    runs-on: ubuntu-latest
    # Job steps
    steps:
      - uses: actions/checkout@v1
      - name: Install dependencies
        # ðŸ‘‡ Install dependencies with the same package manager used in the project (replace it as needed), e.g. yarn, npm, pnpm
        run: yarn
        # ðŸ‘‡ Adds Chromatic as a step in the workflow
      - name: Publish to Chromatic
        uses: chromaui/action@v1
        # Chromatic GitHub Action options
        with:
          # ðŸ‘‡ Chromatic projectToken, refer to the manage page to obtain it.
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
  storybook-deployment:
    env:
      IMAGE_NAME: "eastplayers/${{ github.event.repository.name }}"
      IMAGE_TAG: "production-0.1.${{github.run_number}}"
      IMAGE_TAG_LATEST: "production-latest"
      NAMESPACE: "platform-ui-production"
      DEPLOYMENT: "platform-ui-production"
      CONTAINER_NAME: "platform-ui-production"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and Push Docker Image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }}
          build-args: |
            "$PRODUCTION_ENV"
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Dump github context
        run: echo "$GITHUB_CONTEXT"
        shell: bash
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig production
        run: doctl kubernetes cluster kubeconfig save ${{ secrets.DIGITALOCEAN_CLUSTER_PRODUCTION }}

      - name: Update image tag
        run: kubectl set image -n ${{ env.NAMESPACE }} deployment/${{ env.DEPLOYMENT }} ${{ env.CONTAINER_NAME }}=${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Rollout
        run: kubectl rollout restart deployment ${{ env.DEPLOYMENT }} -n ${{ env.NAMESPACE }}

      - name: Actions Status Discord
        if: always()
        uses: sarisia/actions-status-discord@v1.8.6
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
