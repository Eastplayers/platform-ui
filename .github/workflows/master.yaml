name: Production Deployment CI/CD

on:
  push:
    branches: [master]

jobs:
  chromatic-deployment:
    # Operating System
    runs-on: ubuntu-latest
    # Job steps
    steps:
      - uses: actions/checkout@v1
      - name: Install dependencies
        # ðŸ‘‡ Install dependencies with the same package manager used in the project (replace it as needed), e.g. yarn, npm, pnpm
        run: yarn
        # ðŸ‘‡ Adds Chromatic as a step in the workflow
      - name: Publish to Chromatic
        uses: chromaui/action@v1
        # Chromatic GitHub Action options
        with:
          # ðŸ‘‡ Chromatic projectToken, refer to the manage page to obtain it.
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
  storybook-deployment:
    env:
      IMAGE_NAME: 'eastplayers/${{ github.event.repository.name }}'
      IMAGE_TAG: 'production-0.1.${{github.run_number}}'
      IMAGE_TAG_LATEST: 'production-latest'
      HOSTING:  'host2'
      CONTAINER: 'platform_ui_production'

    runs-on: [self-hosted, worker]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        
      - name: Build image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }} .
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG}} .  
        shell: bash

      - name: Push image
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }}
          docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG}}
        shell: bash

      - name: Clean disk space
        run: |
          rm -rf *
          export TZ=Asia/Ho_Chi_Minh
          echo "The job have completed at $(date)" > logs
          docker rmi ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }}
          docker rmi ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG}}

      - name: Deploy
        run: |
          cd ~/scripts
          ./deploy_remote_${{  env.HOSTING  }}.sh ${{  env.CONTAINER  }}
        shell: bash
